// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact.proto

package org.derecalliance.derec.protobuf;

public final class Contact {
  private Contact() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ContactMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.derecalliance.derec.protobuf.ContactMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     **
     * public key in PEM encoding format
     * </pre>
     *
     * <code>string publicEncryptionKey = 1;</code>
     * @return The publicEncryptionKey.
     */
    java.lang.String getPublicEncryptionKey();
    /**
     * <pre>
     **
     * public key in PEM encoding format
     * </pre>
     *
     * <code>string publicEncryptionKey = 1;</code>
     * @return The bytes for publicEncryptionKey.
     */
    com.google.protobuf.ByteString
        getPublicEncryptionKeyBytes();

    /**
     * <pre>
     **
     * A number used to later identify the publicEncryptionKey. 
     * When a message is sent to the creator of this contact, and it is encrypted
     * with the publicEncryptionKey, this identifier is also sent, so the recipient 
     * knows which key to use to decrypt it. If the recipient creates multiple 
     * keys for multiple pairings, then they should remember the publicKeyId that
     * they chose for each one, so they won't have to try all the keys during decryption. 
     * </pre>
     *
     * <code>int32 publicKeyId = 2;</code>
     * @return The publicKeyId.
     */
    int getPublicKeyId();

    /**
     * <pre>
     **
     * 64-bit (random) nonce to identify the pairing session. 
     * This should be given to a party after authenticating.
     * </pre>
     *
     * <code>int64 nonce = 3;</code>
     * @return The nonce.
     */
    long getNonce();

    /**
     * <pre>
     **
     * URI endpoint for contacting the helper/sharer
     * This can be an https endpoint or a rabbitMQ endpoint
     * </pre>
     *
     * <code>string transportUri = 4;</code>
     * @return The transportUri.
     */
    java.lang.String getTransportUri();
    /**
     * <pre>
     **
     * URI endpoint for contacting the helper/sharer
     * This can be an https endpoint or a rabbitMQ endpoint
     * </pre>
     *
     * <code>string transportUri = 4;</code>
     * @return The bytes for transportUri.
     */
    com.google.protobuf.ByteString
        getTransportUriBytes();

    /**
     * <pre>
     **
     * Message encoding mechanism
     * </pre>
     *
     * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
     * @return The enum numeric value on the wire for messageEncodingType.
     */
    int getMessageEncodingTypeValue();
    /**
     * <pre>
     **
     * Message encoding mechanism
     * </pre>
     *
     * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
     * @return The messageEncodingType.
     */
    org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum getMessageEncodingType();
  }
  /**
   * <pre>
   **
   * ----------------------------------------------------------------------------
   * This is the sole message that is not a DeRecMessage. It is not encrypted,
   * not signed, and not sent through the usual communication channels. It 
   * might be in a QR code, presented by either the helper or sharer, and scanned
   * by the other party.  Or it might be in an app that is provided by one party
   * and used by another party.  Or it might be sent through an existing channel
   * if the two parties already have some other relationship before they start
   * the DeRec protocol. The nonce might be sent separately from the rest of it.
   * ----------------------------------------------------------------------------
   * </pre>
   *
   * Protobuf type {@code org.derecalliance.derec.protobuf.ContactMessage}
   */
  public static final class ContactMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.derecalliance.derec.protobuf.ContactMessage)
      ContactMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ContactMessage.newBuilder() to construct.
    private ContactMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ContactMessage() {
      publicEncryptionKey_ = "";
      transportUri_ = "";
      messageEncodingType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ContactMessage();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.derecalliance.derec.protobuf.Contact.internal_static_org_derecalliance_derec_protobuf_ContactMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.derecalliance.derec.protobuf.Contact.internal_static_org_derecalliance_derec_protobuf_ContactMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.derecalliance.derec.protobuf.Contact.ContactMessage.class, org.derecalliance.derec.protobuf.Contact.ContactMessage.Builder.class);
    }

    /**
     * Protobuf enum {@code org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum}
     */
    public enum MessageEncodingEnum
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>Protobuf = 0;</code>
       */
      Protobuf(0),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>Protobuf = 0;</code>
       */
      public static final int Protobuf_VALUE = 0;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MessageEncodingEnum valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static MessageEncodingEnum forNumber(int value) {
        switch (value) {
          case 0: return Protobuf;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MessageEncodingEnum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          MessageEncodingEnum> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MessageEncodingEnum>() {
              public MessageEncodingEnum findValueByNumber(int number) {
                return MessageEncodingEnum.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.derecalliance.derec.protobuf.Contact.ContactMessage.getDescriptor().getEnumTypes().get(0);
      }

      private static final MessageEncodingEnum[] VALUES = values();

      public static MessageEncodingEnum valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private MessageEncodingEnum(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum)
    }

    public static final int PUBLICENCRYPTIONKEY_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object publicEncryptionKey_ = "";
    /**
     * <pre>
     **
     * public key in PEM encoding format
     * </pre>
     *
     * <code>string publicEncryptionKey = 1;</code>
     * @return The publicEncryptionKey.
     */
    @java.lang.Override
    public java.lang.String getPublicEncryptionKey() {
      java.lang.Object ref = publicEncryptionKey_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        publicEncryptionKey_ = s;
        return s;
      }
    }
    /**
     * <pre>
     **
     * public key in PEM encoding format
     * </pre>
     *
     * <code>string publicEncryptionKey = 1;</code>
     * @return The bytes for publicEncryptionKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPublicEncryptionKeyBytes() {
      java.lang.Object ref = publicEncryptionKey_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        publicEncryptionKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PUBLICKEYID_FIELD_NUMBER = 2;
    private int publicKeyId_ = 0;
    /**
     * <pre>
     **
     * A number used to later identify the publicEncryptionKey. 
     * When a message is sent to the creator of this contact, and it is encrypted
     * with the publicEncryptionKey, this identifier is also sent, so the recipient 
     * knows which key to use to decrypt it. If the recipient creates multiple 
     * keys for multiple pairings, then they should remember the publicKeyId that
     * they chose for each one, so they won't have to try all the keys during decryption. 
     * </pre>
     *
     * <code>int32 publicKeyId = 2;</code>
     * @return The publicKeyId.
     */
    @java.lang.Override
    public int getPublicKeyId() {
      return publicKeyId_;
    }

    public static final int NONCE_FIELD_NUMBER = 3;
    private long nonce_ = 0L;
    /**
     * <pre>
     **
     * 64-bit (random) nonce to identify the pairing session. 
     * This should be given to a party after authenticating.
     * </pre>
     *
     * <code>int64 nonce = 3;</code>
     * @return The nonce.
     */
    @java.lang.Override
    public long getNonce() {
      return nonce_;
    }

    public static final int TRANSPORTURI_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object transportUri_ = "";
    /**
     * <pre>
     **
     * URI endpoint for contacting the helper/sharer
     * This can be an https endpoint or a rabbitMQ endpoint
     * </pre>
     *
     * <code>string transportUri = 4;</code>
     * @return The transportUri.
     */
    @java.lang.Override
    public java.lang.String getTransportUri() {
      java.lang.Object ref = transportUri_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transportUri_ = s;
        return s;
      }
    }
    /**
     * <pre>
     **
     * URI endpoint for contacting the helper/sharer
     * This can be an https endpoint or a rabbitMQ endpoint
     * </pre>
     *
     * <code>string transportUri = 4;</code>
     * @return The bytes for transportUri.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTransportUriBytes() {
      java.lang.Object ref = transportUri_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transportUri_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MESSAGEENCODINGTYPE_FIELD_NUMBER = 5;
    private int messageEncodingType_ = 0;
    /**
     * <pre>
     **
     * Message encoding mechanism
     * </pre>
     *
     * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
     * @return The enum numeric value on the wire for messageEncodingType.
     */
    @java.lang.Override public int getMessageEncodingTypeValue() {
      return messageEncodingType_;
    }
    /**
     * <pre>
     **
     * Message encoding mechanism
     * </pre>
     *
     * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
     * @return The messageEncodingType.
     */
    @java.lang.Override public org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum getMessageEncodingType() {
      org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum result = org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum.forNumber(messageEncodingType_);
      return result == null ? org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(publicEncryptionKey_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, publicEncryptionKey_);
      }
      if (publicKeyId_ != 0) {
        output.writeInt32(2, publicKeyId_);
      }
      if (nonce_ != 0L) {
        output.writeInt64(3, nonce_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transportUri_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, transportUri_);
      }
      if (messageEncodingType_ != org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum.Protobuf.getNumber()) {
        output.writeEnum(5, messageEncodingType_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(publicEncryptionKey_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, publicEncryptionKey_);
      }
      if (publicKeyId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, publicKeyId_);
      }
      if (nonce_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, nonce_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(transportUri_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, transportUri_);
      }
      if (messageEncodingType_ != org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum.Protobuf.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, messageEncodingType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.derecalliance.derec.protobuf.Contact.ContactMessage)) {
        return super.equals(obj);
      }
      org.derecalliance.derec.protobuf.Contact.ContactMessage other = (org.derecalliance.derec.protobuf.Contact.ContactMessage) obj;

      if (!getPublicEncryptionKey()
          .equals(other.getPublicEncryptionKey())) return false;
      if (getPublicKeyId()
          != other.getPublicKeyId()) return false;
      if (getNonce()
          != other.getNonce()) return false;
      if (!getTransportUri()
          .equals(other.getTransportUri())) return false;
      if (messageEncodingType_ != other.messageEncodingType_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PUBLICENCRYPTIONKEY_FIELD_NUMBER;
      hash = (53 * hash) + getPublicEncryptionKey().hashCode();
      hash = (37 * hash) + PUBLICKEYID_FIELD_NUMBER;
      hash = (53 * hash) + getPublicKeyId();
      hash = (37 * hash) + NONCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNonce());
      hash = (37 * hash) + TRANSPORTURI_FIELD_NUMBER;
      hash = (53 * hash) + getTransportUri().hashCode();
      hash = (37 * hash) + MESSAGEENCODINGTYPE_FIELD_NUMBER;
      hash = (53 * hash) + messageEncodingType_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.derecalliance.derec.protobuf.Contact.ContactMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.derecalliance.derec.protobuf.Contact.ContactMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     * ----------------------------------------------------------------------------
     * This is the sole message that is not a DeRecMessage. It is not encrypted,
     * not signed, and not sent through the usual communication channels. It 
     * might be in a QR code, presented by either the helper or sharer, and scanned
     * by the other party.  Or it might be in an app that is provided by one party
     * and used by another party.  Or it might be sent through an existing channel
     * if the two parties already have some other relationship before they start
     * the DeRec protocol. The nonce might be sent separately from the rest of it.
     * ----------------------------------------------------------------------------
     * </pre>
     *
     * Protobuf type {@code org.derecalliance.derec.protobuf.ContactMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.derecalliance.derec.protobuf.ContactMessage)
        org.derecalliance.derec.protobuf.Contact.ContactMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.derecalliance.derec.protobuf.Contact.internal_static_org_derecalliance_derec_protobuf_ContactMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.derecalliance.derec.protobuf.Contact.internal_static_org_derecalliance_derec_protobuf_ContactMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.derecalliance.derec.protobuf.Contact.ContactMessage.class, org.derecalliance.derec.protobuf.Contact.ContactMessage.Builder.class);
      }

      // Construct using org.derecalliance.derec.protobuf.Contact.ContactMessage.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        publicEncryptionKey_ = "";
        publicKeyId_ = 0;
        nonce_ = 0L;
        transportUri_ = "";
        messageEncodingType_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.derecalliance.derec.protobuf.Contact.internal_static_org_derecalliance_derec_protobuf_ContactMessage_descriptor;
      }

      @java.lang.Override
      public org.derecalliance.derec.protobuf.Contact.ContactMessage getDefaultInstanceForType() {
        return org.derecalliance.derec.protobuf.Contact.ContactMessage.getDefaultInstance();
      }

      @java.lang.Override
      public org.derecalliance.derec.protobuf.Contact.ContactMessage build() {
        org.derecalliance.derec.protobuf.Contact.ContactMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.derecalliance.derec.protobuf.Contact.ContactMessage buildPartial() {
        org.derecalliance.derec.protobuf.Contact.ContactMessage result = new org.derecalliance.derec.protobuf.Contact.ContactMessage(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.derecalliance.derec.protobuf.Contact.ContactMessage result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.publicEncryptionKey_ = publicEncryptionKey_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.publicKeyId_ = publicKeyId_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.nonce_ = nonce_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.transportUri_ = transportUri_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.messageEncodingType_ = messageEncodingType_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.derecalliance.derec.protobuf.Contact.ContactMessage) {
          return mergeFrom((org.derecalliance.derec.protobuf.Contact.ContactMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.derecalliance.derec.protobuf.Contact.ContactMessage other) {
        if (other == org.derecalliance.derec.protobuf.Contact.ContactMessage.getDefaultInstance()) return this;
        if (!other.getPublicEncryptionKey().isEmpty()) {
          publicEncryptionKey_ = other.publicEncryptionKey_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.getPublicKeyId() != 0) {
          setPublicKeyId(other.getPublicKeyId());
        }
        if (other.getNonce() != 0L) {
          setNonce(other.getNonce());
        }
        if (!other.getTransportUri().isEmpty()) {
          transportUri_ = other.transportUri_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.messageEncodingType_ != 0) {
          setMessageEncodingTypeValue(other.getMessageEncodingTypeValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                publicEncryptionKey_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                publicKeyId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                nonce_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                transportUri_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                messageEncodingType_ = input.readEnum();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object publicEncryptionKey_ = "";
      /**
       * <pre>
       **
       * public key in PEM encoding format
       * </pre>
       *
       * <code>string publicEncryptionKey = 1;</code>
       * @return The publicEncryptionKey.
       */
      public java.lang.String getPublicEncryptionKey() {
        java.lang.Object ref = publicEncryptionKey_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          publicEncryptionKey_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * public key in PEM encoding format
       * </pre>
       *
       * <code>string publicEncryptionKey = 1;</code>
       * @return The bytes for publicEncryptionKey.
       */
      public com.google.protobuf.ByteString
          getPublicEncryptionKeyBytes() {
        java.lang.Object ref = publicEncryptionKey_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          publicEncryptionKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * public key in PEM encoding format
       * </pre>
       *
       * <code>string publicEncryptionKey = 1;</code>
       * @param value The publicEncryptionKey to set.
       * @return This builder for chaining.
       */
      public Builder setPublicEncryptionKey(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        publicEncryptionKey_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * public key in PEM encoding format
       * </pre>
       *
       * <code>string publicEncryptionKey = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPublicEncryptionKey() {
        publicEncryptionKey_ = getDefaultInstance().getPublicEncryptionKey();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * public key in PEM encoding format
       * </pre>
       *
       * <code>string publicEncryptionKey = 1;</code>
       * @param value The bytes for publicEncryptionKey to set.
       * @return This builder for chaining.
       */
      public Builder setPublicEncryptionKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        publicEncryptionKey_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private int publicKeyId_ ;
      /**
       * <pre>
       **
       * A number used to later identify the publicEncryptionKey. 
       * When a message is sent to the creator of this contact, and it is encrypted
       * with the publicEncryptionKey, this identifier is also sent, so the recipient 
       * knows which key to use to decrypt it. If the recipient creates multiple 
       * keys for multiple pairings, then they should remember the publicKeyId that
       * they chose for each one, so they won't have to try all the keys during decryption. 
       * </pre>
       *
       * <code>int32 publicKeyId = 2;</code>
       * @return The publicKeyId.
       */
      @java.lang.Override
      public int getPublicKeyId() {
        return publicKeyId_;
      }
      /**
       * <pre>
       **
       * A number used to later identify the publicEncryptionKey. 
       * When a message is sent to the creator of this contact, and it is encrypted
       * with the publicEncryptionKey, this identifier is also sent, so the recipient 
       * knows which key to use to decrypt it. If the recipient creates multiple 
       * keys for multiple pairings, then they should remember the publicKeyId that
       * they chose for each one, so they won't have to try all the keys during decryption. 
       * </pre>
       *
       * <code>int32 publicKeyId = 2;</code>
       * @param value The publicKeyId to set.
       * @return This builder for chaining.
       */
      public Builder setPublicKeyId(int value) {

        publicKeyId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * A number used to later identify the publicEncryptionKey. 
       * When a message is sent to the creator of this contact, and it is encrypted
       * with the publicEncryptionKey, this identifier is also sent, so the recipient 
       * knows which key to use to decrypt it. If the recipient creates multiple 
       * keys for multiple pairings, then they should remember the publicKeyId that
       * they chose for each one, so they won't have to try all the keys during decryption. 
       * </pre>
       *
       * <code>int32 publicKeyId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPublicKeyId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        publicKeyId_ = 0;
        onChanged();
        return this;
      }

      private long nonce_ ;
      /**
       * <pre>
       **
       * 64-bit (random) nonce to identify the pairing session. 
       * This should be given to a party after authenticating.
       * </pre>
       *
       * <code>int64 nonce = 3;</code>
       * @return The nonce.
       */
      @java.lang.Override
      public long getNonce() {
        return nonce_;
      }
      /**
       * <pre>
       **
       * 64-bit (random) nonce to identify the pairing session. 
       * This should be given to a party after authenticating.
       * </pre>
       *
       * <code>int64 nonce = 3;</code>
       * @param value The nonce to set.
       * @return This builder for chaining.
       */
      public Builder setNonce(long value) {

        nonce_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * 64-bit (random) nonce to identify the pairing session. 
       * This should be given to a party after authenticating.
       * </pre>
       *
       * <code>int64 nonce = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNonce() {
        bitField0_ = (bitField0_ & ~0x00000004);
        nonce_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object transportUri_ = "";
      /**
       * <pre>
       **
       * URI endpoint for contacting the helper/sharer
       * This can be an https endpoint or a rabbitMQ endpoint
       * </pre>
       *
       * <code>string transportUri = 4;</code>
       * @return The transportUri.
       */
      public java.lang.String getTransportUri() {
        java.lang.Object ref = transportUri_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transportUri_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       **
       * URI endpoint for contacting the helper/sharer
       * This can be an https endpoint or a rabbitMQ endpoint
       * </pre>
       *
       * <code>string transportUri = 4;</code>
       * @return The bytes for transportUri.
       */
      public com.google.protobuf.ByteString
          getTransportUriBytes() {
        java.lang.Object ref = transportUri_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transportUri_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       **
       * URI endpoint for contacting the helper/sharer
       * This can be an https endpoint or a rabbitMQ endpoint
       * </pre>
       *
       * <code>string transportUri = 4;</code>
       * @param value The transportUri to set.
       * @return This builder for chaining.
       */
      public Builder setTransportUri(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        transportUri_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * URI endpoint for contacting the helper/sharer
       * This can be an https endpoint or a rabbitMQ endpoint
       * </pre>
       *
       * <code>string transportUri = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransportUri() {
        transportUri_ = getDefaultInstance().getTransportUri();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * URI endpoint for contacting the helper/sharer
       * This can be an https endpoint or a rabbitMQ endpoint
       * </pre>
       *
       * <code>string transportUri = 4;</code>
       * @param value The bytes for transportUri to set.
       * @return This builder for chaining.
       */
      public Builder setTransportUriBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        transportUri_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private int messageEncodingType_ = 0;
      /**
       * <pre>
       **
       * Message encoding mechanism
       * </pre>
       *
       * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
       * @return The enum numeric value on the wire for messageEncodingType.
       */
      @java.lang.Override public int getMessageEncodingTypeValue() {
        return messageEncodingType_;
      }
      /**
       * <pre>
       **
       * Message encoding mechanism
       * </pre>
       *
       * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
       * @param value The enum numeric value on the wire for messageEncodingType to set.
       * @return This builder for chaining.
       */
      public Builder setMessageEncodingTypeValue(int value) {
        messageEncodingType_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Message encoding mechanism
       * </pre>
       *
       * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
       * @return The messageEncodingType.
       */
      @java.lang.Override
      public org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum getMessageEncodingType() {
        org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum result = org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum.forNumber(messageEncodingType_);
        return result == null ? org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       **
       * Message encoding mechanism
       * </pre>
       *
       * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
       * @param value The messageEncodingType to set.
       * @return This builder for chaining.
       */
      public Builder setMessageEncodingType(org.derecalliance.derec.protobuf.Contact.ContactMessage.MessageEncodingEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        messageEncodingType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       **
       * Message encoding mechanism
       * </pre>
       *
       * <code>.org.derecalliance.derec.protobuf.ContactMessage.MessageEncodingEnum messageEncodingType = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessageEncodingType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        messageEncodingType_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.derecalliance.derec.protobuf.ContactMessage)
    }

    // @@protoc_insertion_point(class_scope:org.derecalliance.derec.protobuf.ContactMessage)
    private static final org.derecalliance.derec.protobuf.Contact.ContactMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.derecalliance.derec.protobuf.Contact.ContactMessage();
    }

    public static org.derecalliance.derec.protobuf.Contact.ContactMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ContactMessage>
        PARSER = new com.google.protobuf.AbstractParser<ContactMessage>() {
      @java.lang.Override
      public ContactMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ContactMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ContactMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.derecalliance.derec.protobuf.Contact.ContactMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_derecalliance_derec_protobuf_ContactMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_derecalliance_derec_protobuf_ContactMessage_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rcontact.proto\022 org.derecalliance.derec" +
      ".protobuf\"\357\001\n\016ContactMessage\022\033\n\023publicEn" +
      "cryptionKey\030\001 \001(\t\022\023\n\013publicKeyId\030\002 \001(\005\022\r" +
      "\n\005nonce\030\003 \001(\003\022\024\n\014transportUri\030\004 \001(\t\022a\n\023m" +
      "essageEncodingType\030\005 \001(\0162D.org.derecalli" +
      "ance.derec.protobuf.ContactMessage.Messa" +
      "geEncodingEnum\"#\n\023MessageEncodingEnum\022\014\n" +
      "\010Protobuf\020\000b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_org_derecalliance_derec_protobuf_ContactMessage_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_derecalliance_derec_protobuf_ContactMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_derecalliance_derec_protobuf_ContactMessage_descriptor,
        new java.lang.String[] { "PublicEncryptionKey", "PublicKeyId", "Nonce", "TransportUri", "MessageEncodingType", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
